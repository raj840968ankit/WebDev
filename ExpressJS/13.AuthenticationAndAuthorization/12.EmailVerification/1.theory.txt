//..................How to verify email (Test Email using ethereal and nodemailer)............................
//Step 1 - add a attribute to userTable 'isEmailValid' for email verification icon in profile.ejs (schema.js) 
//  - send the value of isEmailValid to profile.ejs (auth.controller.js -> getProfilePage)
//  - update the email verification icon in profile.ejs
//  - update isEmailValid everywhere related to token(createAccessToken, refreshAccessToken(middleware), postLogin and postRegister)

//Step 2 - create a email schema (verifyEmailTokenTable) for verification of email(schema.js) (!important)
//  - npm run db:generate && npm run db:migrate
//  - create a route '/verify-email' after clicking on verify-email button in 'profile.ejs'

//Step 3 - Generate and store 8 digit email verification token (verify-email.ejs)
//  - create a route for 'resend-verification-link' (auth.route.js -> auth.controller.js)
//  - Generating random token - auth.controller.js 
//  - insert verification email token in database
//  - create a verification link with token value and email value

//Step 4 - Send Emails in NodeJS using NodeMailer and ethereal
//  - 'npm i nodemailer'
//  - check usage in auth.controller.js -> resend-verification-link
//  - create a 'lib' folder -> nodemailer.js file
//  - copy code of 'using an ethereal-test-account' from 'nodemailer website' and paste to nodemailer.js
//  - after clicking on resend (verify-email.ejs), we will get a ethereal link in our console 

step 5 - Using DBMS transaction
//  - using DBMS transaction in 'insertVerifyEmailToken' (auth.services.js)

Step 6 - Using URL API of JS 
//  - made easy for generating 'emailVerificationLink' that we previously generated in step 3

Step 7 - Last step of verification
//  - create a route for 'verify-email-token' for verifying the ethereal mail generated link or token 
//  - Do the zod validation for email and token before getting value from URL(validators -> auth.validator.js)
//  - in verifyEmailToken router we have taken the data from url and 



//..............Email Verification just after registration(no manual verifying email)................................
//  - since we were getting email verification link by clicking on resend verification link button
//  - so we can copy that resend verification link and can use in registration directly(but after authentication)


//.......Use of MJML instead of HTML for sending dynamic email templates........................
//  - install via 'npm i mjml'
//  - create a folder 'emails' -> 'verify-email.mjml' file and paste the inbuilt code
//  - go to (auth.services.js -> sendVerificationEmailLink) and retrieve mjml file instead of html file
//  - convert mjml to html


//..........<<<<<<<<<< Now we can use original gmail verification in our project (limitation using resend api key)>>>>>>>>>>>...............
//   -we were previously using 'nodemailer' library to send email verification using 'smtp server'
//   -but in this approach we will use 'resend' library to send email using 'API key' (more secure but need custom verified domain to send to all user)
//   - install via 'npm i resend'
//   -check usage in 'resend.lib.js'


//..........<<<<<<<<<< Now we can use original gmail verification in our project (Using nodemailer SMTP approach)>>>>>>>>>>>...............
//   -create app password in gmail first(nvydnchdfkurqndc)
//   -check usage in nodemailer.lib.js