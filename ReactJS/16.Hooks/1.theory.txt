//...........................................useState................................................................
// check usage in react-thapa -> src -> components -> hooks -> useState

//form submission (!important) - check how useState works with formData -> RegistrationReact.jsx

//...........................................useEffect...............................................................
//Fetching or manipulating  the data which is outside the scope is known as side-effect in react
//useEffect is used to mitigate from the side-effects of react
//it is used for fetching the data from external resource such as API
//it is also used to manipulate data which is outside the scope such as global variable 

//check first usage in react-thapa -> src -> components -> hooks -> useEffect -> src-index.jsx

//check for How not Fetching Api -> HowNotToFetchApi.jsx (very important)
//   - never use async await for fetching API directly with components instead make a function or use then-catch

//! this way we cannot fetch API
    // fetch("https://jsonplaceholder.typicode.com/posts")
    //     .then((res) => res.json())
    //     .then((data) => setApiData(data))
    //     .catch((error) => console.error(error))

    //!this is the right way to fetch API 
    // useEffect(() => {
    //     fetch("https://jsonplaceholder.typicode.com/posts")
    //         .then((res) => res.json())
    //         .then((data) => setApiData(data))
    //         .catch((error) => console.error(error))
    // }, [])

//....Handle Loading and error states (using useEffect)....
//check usage -> HowNotToFetchApi.jsx (very important)

//.........................Mega Project (Complex API).............................
//check new react project 'react-pokemon' in react js directory


//................................................useRef...............................................................

//check first usage in react-thapa -> src -> components -> hooks -> useRef -> index.jsx


//................................................useId...............................................................

//check first usage in react-thapa -> src -> components -> hooks -> useId -> index.jsx

//.......................Always use with useRef......................................


//.................................................Context API..........................................................
//check the usage of context API in 17.ContextAPI directory

//.................................................useReducer...........................................................
//This hook is the advanced alternative of useState
//check first usage in react-thapa -> src -> components -> hooks -> useReducer -> index.jsx

//........................................React Memo(used with component)...........................................................
//it prevents from unnecessary render of child component due to parent component
//the child component will only render until props passed in child component changes
//check usage in react-thapa -> src -> components -> hooks -> Memo -> (ReactMemo.jsx , MemoCount.jsx)

//........................useMemo..........................
//used with object, value of computed function value

//useMemo hook is used to optimize expensive calculation which give same result by caching (memoization)
//by using useMemo hook it prevent delay renders of other component due to expensive calculation
//check usage in react-thapa -> src -> components -> hooks -> Memo -> (UseMemo.jsx)

//Whenever we pass props always use (React Memo + useMemo) combination (ReactMemo.jsx , MemoCount.jsx)

//.....................useCallback.........................
//used with function that can cause re-render child component(same as useMemo but especially built for functions) 


