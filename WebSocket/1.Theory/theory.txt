//...............................................Web Socket.................................................................
//Some important points -
//   - socket                  -> a particular client
//   - io                      -> all the clients in an io circuit
//   - emit                    -> trigger an event
//   - on                      -> listen to an event
//   - socket.emit()           -> trigger event to a client
//   - io.emit()               -> trigger event to all the client in entire io circuit
//   - socket.broadcast.emit() -> trigger event to all the clients except current client
//   - socket.to().emit()      -> send message to particular room
//   - socket.join()           -> join a group of particular sockets in a room

//..........................................Learning Socket..............................................................
// create two directory 'client' and 'server' in '2.LearningSocket' 

//..............................Setup for web socket.................................

//  server -> 'npm init -y', 'npm i express socket.io', 'npm i cors' (for connection of backend and frontend)
//  client -> 'npm create vite@latest'(project name -> . ('.' for same directory) -> react -> javascript + swc) 
//                  - go to 'material ui website' and check installation and install via 'npm install @mui/material @emotion/react @emotion/styled'
//                  - 'npm i socket.io-client'


//.............................Start the journey....................................
// ...............server................
// create app.js in server 
// create a express server -> create a http server -> import Server from socket.io and make an instance of io circuit -> create io circuit

    import express from 'express'
    import { Server } from 'socket.io'
    import { createServer } from 'http'
    import cors from 'cors'

    const PORT = 3000

    const app = express()

    const server = createServer(app)   //! created server of http

    const io = new Server(server, {    //! created io instance and connecting to frontend io
        cors: {
            origin: 'http://localhost:5173',    //frontend URL
            methods: ['GET', 'POST', 'PUT', 'DELETE'],
            credentials: true
        }
    })

    //!.... VVI (for normal frontend and backend connection)
    app.use(cors({
        origin: 'http://localhost:5173',    //frontend URL
        methods: ['GET', 'POST', 'PUT', 'DELETE'],
        credentials: true
    }));

    app.get('/', (req, res) => {
        res.send(`<h1>hello world</h1>`)
    })

    //!creating io circuit here
    io.on('connection', (socket) => {
        console.log('user connected');
        console.log("id :",socket.id);
        
    })



    server.listen(PORT, () => {
        console.log(`Server is listening at http://localhost:${PORT}`);
    })

//...............client.................
// remove react initial setup( css and App.jsx content)
// create a io socket in frontend using import io and backend url

// go to backend and connect frontend socket using io circuit

// ....frontend.........
    import {io} from 'socket.io-client'
    export const App = () => {

    const socket = io('http://localhost:3000');   //!creating socket connection with backend

    return (
        <>
        <h1>Hello React</h1>
        </>
    )
    }

// ....connection in backend....
    const io = new Server(server, {    //! created io instance and connecting to frontend io
        cors: {
            origin: 'http://localhost:5173',    //frontend URL
            methods: ['GET', 'POST', 'PUT', 'DELETE'],
            credentials: true
        }
    })


//Go to App.jsx and listen to event connect in useEffect
    //! listen after establishing connection
    useEffect(() => {
        socket.on('connect', () => {
        console.log('connected', socket.id);
        })
    }, [])